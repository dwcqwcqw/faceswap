{
  "version": 3,
  "sources": ["../bundle-A8R450/checked-fetch.js", "../bundle-A8R450/strip-cf-connecting-ip-header.js", "../../../worker.js", "../../../../../../../../../usr/local/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../../../usr/local/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-A8R450/middleware-insertion-facade.js", "../../../../../../../../../usr/local/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-A8R450/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/baileyli/Documents/faceswap/web/cloudflare/.wrangler/tmp/dev-Ui14t5",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "export default {\n  async fetch(request, env, ctx) {\n    // CORS handling\n    if (request.method === 'OPTIONS') {\n      return handleCORS(request, env)\n    }\n\n    const url = new URL(request.url)\n    const path = url.pathname\n\n    try {\n      // Route handling\n      if (path.startsWith('/api/upload')) {\n        return await handleUpload(request, env)\n      } else if (path.startsWith('/api/process/')) {\n        return await handleProcess(request, env, path)\n      } else if (path.startsWith('/api/status/')) {\n        return await handleStatus(request, env, path)\n      } else if (path.startsWith('/api/download/')) {\n        return await handleDownload(request, env, path)\n      } else if (path.startsWith('/api/detect-faces')) {\n        return await handleDetectFaces(request, env)\n      } else {\n        return new Response('Not Found', { status: 404 })\n      }\n    } catch (error) {\n      console.error('Worker error:', error)\n      return new Response(JSON.stringify({\n        success: false,\n        error: error.message || 'Internal server error'\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      })\n    }\n  }\n}\n\n// CORS handler\nexport function handleCORS(request, env) {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Access-Control-Max-Age': '86400'\n    }\n  })\n}\n\n// Upload file to R2\nexport async function handleUpload(request, env) {\n  try {\n    console.log('Upload request received');\n    console.log('Content-Type:', request.headers.get('content-type'));\n    \n    // Check if request has form data\n    const contentType = request.headers.get('content-type');\n    if (!contentType || !contentType.includes('multipart/form-data')) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Content-Type must be multipart/form-data'\n      }), { status: 400, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }})\n    }\n    \n    const formData = await request.formData()\n    const file = formData.get('file')\n    \n    console.log('File received:', file ? file.name : 'null');\n    \n    if (!file) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'No file provided'\n      }), { status: 400, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }})\n    }\n\n    // Generate unique file ID\n    const fileId = generateFileId()\n    const fileExtension = getFileExtension(file.name)\n    const fileName = `uploads/${fileId}.${fileExtension}`\n\n    console.log('Uploading to R2:', fileName);\n\n    // Upload to R2\n    const uploadResult = await env.FACESWAP_BUCKET.put(fileName, file.stream(), {\n      httpMetadata: {\n        contentType: file.type\n      },\n      customMetadata: {\n        originalName: file.name,\n        uploadTime: new Date().toISOString(),\n        fileType: file.type,\n        fileSize: file.size.toString()\n      }\n    })\n\n    if (!uploadResult) {\n      throw new Error('Failed to upload file to R2')\n    }\n\n    console.log('Upload successful:', fileName);\n\n    // Set expiration for uploaded files (24 hours)\n    await scheduleFileDeletion(env, fileName, 24 * 60 * 60 * 1000) // 24 hours\n\n    return new Response(JSON.stringify({\n      success: true,\n      data: {\n        fileId: fileId,\n        fileName: file.name,\n        url: `/api/download/${fileId}`,\n        size: file.size,\n        type: file.type\n      }\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    })\n\n  } catch (error) {\n    console.error('Upload error:', error)\n    return new Response(JSON.stringify({\n      success: false,\n      error: error.message || 'Upload failed'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    })\n  }\n}\n\n// Process face swap request\nexport async function handleProcess(request, env, path) {\n  try {\n    const processType = path.split('/').pop() // single-image, multi-image, etc.\n    const requestBody = await request.json()\n    \n    // Generate job ID\n    const jobId = generateJobId()\n    \n    // Store job in KV with pending status\n    const jobData = {\n      id: jobId,\n      type: processType,\n      status: 'pending',\n      progress: 0,\n      created_at: new Date().toISOString(),\n      source_file: requestBody.source_file,\n      target_file: requestBody.target_file,\n      options: requestBody.options || {}\n    }\n    \n    await env.JOBS.put(jobId, JSON.stringify(jobData))\n\n    // Prepare RunPod request\n    const runpodPayload = {\n      input: {\n        job_id: jobId,\n        process_type: processType,\n        source_file: await getR2FileUrl(env, requestBody.source_file),\n        target_file: await getR2FileUrl(env, requestBody.target_file),\n        options: requestBody.options || {}\n      }\n    }\n\n    // Send to RunPod\n    const runpodResponse = await fetch(`https://api.runpod.ai/v2/${env.RUNPOD_ENDPOINT_ID}/run`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${env.RUNPOD_TOKEN}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(runpodPayload)\n    })\n\n    const runpodResult = await runpodResponse.json()\n    \n    if (!runpodResponse.ok) {\n      throw new Error(`RunPod error: ${runpodResult.error || 'Unknown error'}`)\n    }\n\n    // Update job with RunPod ID\n    jobData.runpod_id = runpodResult.id\n    jobData.status = 'processing'\n    await env.JOBS.put(jobId, JSON.stringify(jobData))\n\n    return new Response(JSON.stringify({\n      success: true,\n      data: { jobId }\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    })\n\n  } catch (error) {\n    console.error('Process error:', error)\n    return new Response(JSON.stringify({\n      success: false,\n      error: error.message || 'Processing failed'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    })\n  }\n}\n\n// Get job status\nexport async function handleStatus(request, env, path) {\n  try {\n    const jobId = path.split('/').pop()\n    console.log(`\uD83D\uDCCB Checking status for job: ${jobId}`);\n    \n    // Get job from KV\n    const jobData = await env.JOBS.get(jobId)\n    if (!jobData) {\n      console.log(`\u274C Job not found: ${jobId}`);\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Job not found'\n      }), { status: 404, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }})\n    }\n\n    const job = JSON.parse(jobData)\n    console.log(`\uD83D\uDD0D Job status: ${job.status}, RunPod ID: ${job.runpod_id}`);\n\n    // If processing, check RunPod status\n    if (job.status === 'processing' && job.runpod_id) {\n      console.log(`\uD83D\uDD04 Checking RunPod status for: ${job.runpod_id}`);\n      \n      const runpodResponse = await fetch(`https://api.runpod.ai/v2/${env.RUNPOD_ENDPOINT_ID}/status/${job.runpod_id}`, {\n        headers: {\n          'Authorization': `Bearer ${env.RUNPOD_TOKEN}`\n        }\n      })\n\n      if (!runpodResponse.ok) {\n        console.log(`\u26A0\uFE0F RunPod API error: ${runpodResponse.status} ${runpodResponse.statusText}`);\n        // Don't fail completely, just return current job status\n      } else {\n        const runpodResult = await runpodResponse.json()\n        console.log(`\uD83D\uDCCA RunPod result:`, JSON.stringify(runpodResult, null, 2));\n        \n        // Update job based on RunPod status\n        if (runpodResult.status === 'COMPLETED') {\n          console.log(`\u2705 RunPod job completed, processing result...`);\n          \n          job.status = 'completed'\n          job.progress = 100\n          job.completed_at = new Date().toISOString()\n          \n          // Handle different result formats from RunPod\n          if (runpodResult.output) {\n            console.log(`\uD83D\uDD0D Processing RunPod output...`);\n            \n            try {\n              // Format 1: result_url (from old handler)\n              if (runpodResult.output.result_url) {\n                console.log(`\uD83D\uDCCE Found result_url format: ${runpodResult.output.result_url}`);\n                const resultFileId = await storeResultFromUrl(env, runpodResult.output.result_url, jobId)\n                job.result_url = `/api/download/${resultFileId}`\n              }\n              // Format 2: base64 result (from serverless handler)\n              else if (runpodResult.output.result) {\n                console.log(`\uD83D\uDCC4 Found base64 result format (${runpodResult.output.result.length} chars)`);\n                const resultFileId = await storeResultFromBase64(env, runpodResult.output.result, jobId)\n                job.result_url = `/api/download/${resultFileId}`\n              }\n              // Format 3: direct base64 (legacy)\n              else if (typeof runpodResult.output === 'string') {\n                console.log(`\uD83D\uDCC4 Found direct base64 format (${runpodResult.output.length} chars)`);\n                const resultFileId = await storeResultFromBase64(env, runpodResult.output, jobId)\n                job.result_url = `/api/download/${resultFileId}`\n              }\n              else {\n                console.log(`\u26A0\uFE0F Unknown RunPod output format:`, Object.keys(runpodResult.output));\n              }\n              \n            } catch (resultError) {\n              console.error('\u274C Error processing result:', resultError);\n              job.status = 'failed'\n              job.error_message = `Result processing failed: ${resultError.message}`\n            }\n          } else {\n            console.log(`\u26A0\uFE0F No output in RunPod result`);\n          }\n          \n          await env.JOBS.put(jobId, JSON.stringify(job))\n          console.log(`\uD83D\uDCBE Job updated with new status: ${job.status}`);\n          \n        } else if (runpodResult.status === 'FAILED') {\n          console.log(`\u274C RunPod job failed: ${runpodResult.error || 'Unknown error'}`);\n          job.status = 'failed'\n          job.error_message = runpodResult.error || 'Processing failed'\n          await env.JOBS.put(jobId, JSON.stringify(job))\n        } else {\n          console.log(`\uD83D\uDD04 RunPod job still in progress: ${runpodResult.status}`);\n        }\n      }\n    }\n\n    console.log(`\uD83D\uDCE4 Returning job status: ${job.status}`);\n    return new Response(JSON.stringify({\n      success: true,\n      data: job\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    })\n\n  } catch (error) {\n    console.error('\u274C Status error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: error.message || 'Status check failed'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    })\n  }\n}\n\n// Download file from R2\nexport async function handleDownload(request, env, path) {\n  try {\n    const fileId = path.split('/').pop()\n    console.log('Download request for fileId:', fileId);\n    \n    // Try both uploads and results folders with different extensions\n    const possiblePaths = [\n      `uploads/${fileId}.jpg`,\n      `uploads/${fileId}.jpeg`, \n      `uploads/${fileId}.png`,\n      `uploads/${fileId}.webp`,\n      `uploads/${fileId}.gif`,\n      `uploads/${fileId}.bmp`,\n      `uploads/${fileId}.svg`,\n      `uploads/${fileId}.mp4`,\n      `uploads/${fileId}.avi`,\n      `uploads/${fileId}.mov`,\n      `uploads/${fileId}`,\n      `results/${fileId}.jpg`,\n      `results/${fileId}.jpeg`,\n      `results/${fileId}.png`,\n      `results/${fileId}.webp`,\n      `results/${fileId}.gif`,\n      `results/${fileId}.bmp`, \n      `results/${fileId}.svg`,\n      `results/${fileId}.mp4`,\n      `results/${fileId}.avi`,\n      `results/${fileId}.mov`,\n      `results/${fileId}`\n    ];\n    \n    let r2Object = null;\n    let foundPath = null;\n    \n    for (const testPath of possiblePaths) {\n      console.log('Trying path:', testPath);\n      r2Object = await env.FACESWAP_BUCKET.get(testPath);\n      if (r2Object) {\n        foundPath = testPath;\n        console.log('Found file at:', foundPath);\n        break;\n      }\n    }\n    \n    if (!r2Object) {\n      console.log('File not found in any path');\n      return new Response('File not found', { \n        status: 404,\n        headers: { 'Access-Control-Allow-Origin': '*' }\n      })\n    }\n\n    const headers = new Headers()\n    headers.set('Access-Control-Allow-Origin', '*')\n    headers.set('Content-Type', r2Object.httpMetadata?.contentType || 'application/octet-stream')\n    \n    // Set filename for download\n    let downloadFilename;\n    \n    if (foundPath.startsWith('results/')) {\n      // For result files, create a descriptive filename\n      const timestamp = new Date().toISOString().slice(0, 10); // YYYY-MM-DD\n      downloadFilename = `face_swap_result_${timestamp}.jpg`;\n    } else {\n      // For uploaded files, use original name or generate one with extension\n      const originalName = r2Object.customMetadata?.originalName;\n      if (originalName) {\n        downloadFilename = originalName;\n      } else {\n        // Extract extension from the found path\n        const pathParts = foundPath.split('.');\n        const extension = pathParts.length > 1 ? pathParts.pop() : 'jpg';\n        downloadFilename = `file_${fileId}.${extension}`;\n      }\n    }\n    \n    headers.set('Content-Disposition', `attachment; filename=\"${downloadFilename}\"`)\n\n    console.log('Serving file:', foundPath, 'as:', downloadFilename);\n    return new Response(r2Object.body, { headers })\n\n  } catch (error) {\n    console.error('Download error:', error)\n    return new Response('Download failed', { \n      status: 500,\n      headers: { 'Access-Control-Allow-Origin': '*' }\n    })\n  }\n}\n\n// Face detection handler\nexport async function handleDetectFaces(request, env) {\n  try {\n    const requestBody = await request.json()\n    const fileId = requestBody.fileId\n    \n    if (!fileId) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'No file ID provided'\n      }), { status: 400, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }})\n    }\n\n    // Prepare RunPod request for face detection\n    const runpodPayload = {\n      input: {\n        process_type: 'detect-faces',\n        image_file: await getR2FileUrl(env, fileId)\n      }\n    }\n\n    // Send to RunPod\n    const runpodResponse = await fetch(`https://api.runpod.ai/v2/${env.RUNPOD_ENDPOINT_ID}/run`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${env.RUNPOD_TOKEN}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(runpodPayload)\n    })\n\n    const runpodResult = await runpodResponse.json()\n    \n    if (!runpodResponse.ok) {\n      throw new Error(`RunPod error: ${runpodResult.error || 'Unknown error'}`)\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      data: runpodResult.output\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    })\n\n  } catch (error) {\n    console.error('Face detection error:', error)\n    return new Response(JSON.stringify({\n      success: false,\n      error: error.message || 'Face detection failed'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    })\n  }\n}\n\n// Helper functions\nfunction generateFileId() {\n  return crypto.randomUUID()\n}\n\nfunction generateJobId() {\n  return `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n}\n\nfunction getFileExtension(filename) {\n  return filename.split('.').pop() || 'bin'\n}\n\nasync function getR2FileUrl(env, fileId) {\n  // Instead of generating a direct R2 URL that might not work due to missing extensions,\n  // use our own Worker download endpoint which handles file extension detection\n  return `https://faceswap-api.faceswap.workers.dev/api/download/${fileId}`\n}\n\nasync function storeResultFromUrl(env, resultUrl, jobId) {\n  try {\n    // Download the result from RunPod\n    const response = await fetch(resultUrl)\n    if (!response.ok) {\n      throw new Error('Failed to fetch result file')\n    }\n\n    // Generate result file ID\n    const resultFileId = `result_${jobId}_${Date.now()}`\n    const fileName = `results/${resultFileId}.jpg` // Assume JPG for now\n\n    // Store in R2\n    await env.FACESWAP_BUCKET.put(fileName, response.body, {\n      customMetadata: {\n        jobId: jobId,\n        createdAt: new Date().toISOString(),\n        originalUrl: resultUrl\n      }\n    })\n\n    // Set expiration for result files (7 days)\n    await scheduleFileDeletion(env, fileName, 7 * 24 * 60 * 60 * 1000) // 7 days\n\n    return resultFileId\n\n  } catch (error) {\n    console.error('Failed to store result:', error)\n    throw error\n  }\n}\n\nasync function storeResultFromBase64(env, base64Data, jobId) {\n  try {\n    console.log(`\uD83D\uDD04 Storing base64 result for job ${jobId}...`);\n    \n    // Generate result file ID\n    const resultFileId = `result_${jobId}_${Date.now()}`\n    const fileName = `results/${resultFileId}.jpg` // Assume JPG for now\n\n    // Decode base64 data - Buffer is not available in Cloudflare Workers\n    // Use the Web API atob and convert to Uint8Array\n    const binaryString = atob(base64Data);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    console.log(`\uD83D\uDCBE Storing result file: ${fileName} (${bytes.length} bytes)`);\n\n    // Store in R2\n    await env.FACESWAP_BUCKET.put(fileName, bytes, {\n      httpMetadata: {\n        contentType: 'image/jpeg'\n      },\n      customMetadata: {\n        jobId: jobId,\n        createdAt: new Date().toISOString(),\n        type: 'result'\n      }\n    })\n\n    console.log(`\uD83D\uDCBE Result stored successfully`);\n\n    return resultFileId\n\n  } catch (error) {\n    console.error('Failed to store result:', error)\n    throw error\n  }\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/baileyli/Documents/faceswap/web/cloudflare/worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/usr/local/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/usr/local/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/baileyli/Documents/faceswap/web/cloudflare/worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/baileyli/Documents/faceswap/web/cloudflare/.wrangler/tmp/bundle-A8R450/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/usr/local/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/baileyli/Documents/faceswap/web/cloudflare/.wrangler/tmp/bundle-A8R450/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/baileyli/Documents/faceswap/web/cloudflare/.wrangler/tmp/bundle-A8R450/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
